
local rendercam = require "rendercam.rendercam"
local vp = rendercam.viewport

local IDENTITY_MATRIX = vmath.matrix4()
local CLEAR_COLOR = hash("clear_color")
local WINDOW_RESIZED = hash("window_resized")
local UPDATE_WINDOW = hash("update window")


local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end

local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end

local function update_window(self)
    rendercam.update_window(render.get_window_width(), render.get_window_height())
    self.gui_proj = vmath.matrix4_orthographic(0, rendercam.window.x, 0, rendercam.window.y, -1, 1)
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.model_pred = render.predicate({"model"})
    self.particle_pred = render.predicate({"particle"})
    self.sprite_3d_pred = render.predicate({"sprite_3d"})
    self.skybox_pred = render.predicate({"skybox"})
    self.clear_color = vmath.vector4(0)

    native_raycasting.set_camera_max_dist(50)

    rendercam.configWin.x = render.get_width();  rendercam.configWin.y = render.get_height()
    rendercam.update_window_size(render.get_window_width(), render.get_window_height())
    update_window(self)
end

function update(self)
    -- Set view and projection with latest matrices calculated by the module
    --render.set_view(rendercam.calculate_view())
    --render.set_projection(rendercam.calculate_proj())

    -- Set viewport (x and y will be zero unless using a fixed aspect ratio)
    render.set_viewport(vp.x, vp.y, vp.width, vp.height)

    render.set_depth_mask(true)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_view(IDENTITY_MATRIX)
    render.set_projection(fixed_fit_projection(-1, 1))
    --default 2d
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    

    --3d
    render.set_view(rendercam.calculate_view())
    render.set_projection(rendercam.calculate_proj())
    

    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
   -- render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.skybox_pred)
    render.draw(self.model_pred)
    render.draw(self.sprite_3d_pred)
    -- Physics debug and draw_line rendering
    render.disable_state(render.STATE_DEPTH_TEST)
  --  render.disable_state(render.STATE_CULL_FACE)
    render.draw_debug3d()

    --2d
    render.set_view(IDENTITY_MATRIX)
    render.set_projection(fixed_fit_projection(-1, 1))
    
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)

    -- GUI Rendering
    render.set_viewport(0, 0, rendercam.window.x, rendercam.window.y)
    render.set_view(IDENTITY_MATRIX)
    render.set_projection(self.gui_proj) -- gui_proj only calculated on update_window

    render.disable_state(render.STATE_CULL_FACE)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)

    render.set_depth_mask(false)
    render.draw_debug2d()
end

function on_message(self, message_id, message)
    if message_id == CLEAR_COLOR then
        self.clear_color = message.color
    elseif message_id == WINDOW_RESIZED then -- sent by engine
        update_window(self)
    elseif message_id == UPDATE_WINDOW then -- sent by rendercam when a camera is activated ("window_resized" engine message requires data)
        update_window(self)
    end
end
